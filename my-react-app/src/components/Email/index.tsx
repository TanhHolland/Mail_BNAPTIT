import { zodResolver } from "@hookform/resolvers/zod";
import type { UploadProps } from "antd";
import { Button, message, notification, Upload } from "antd";
import { Controller, useForm } from "react-hook-form";
import { z } from "zod";
import type { IEmailData } from "../../api/apiEmail";
import { useQueryEmail } from "../../api/hooks/email";
import DataTable from "../Data";
import Editor from "../Editors";

const schema = z.object({
  name: z.string().min(1, "T√™n l√† b·∫Øt bu·ªôc"),
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá"),
  title: z.string().min(1, "Ti√™u ƒë·ªÅ l√† b·∫Øt bu·ªôc"),
  content: z.string().min(10, "N·ªôi dung √≠t nh·∫•t 10 k√Ω t·ª±"),
  receivers: z.string().min(1, "Danh s√°ch ng∆∞·ªùi nh·∫≠n l√† b·∫Øt bu·ªôc"),
  attachment: z.array(z.any()).optional(),
});

type FormData = z.infer<typeof schema>;
const EmailSender = () => {
  const {
    handleSubmit,
    register,
    formState: { errors },
    control,
  } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: {
      name: "",
      email: "",
      title: "",
      content: "",
      receivers: "",
      attachment: [],
    },
  });
  const { mutate, isPending } = useQueryEmail();
  const dummyRequest = ({ file, onSuccess }: any) => {
    setTimeout(() => {
      onSuccess("ok");
    }, 0);
  };
  const props: UploadProps = {
    name: "file",
    multiple: true,
    customRequest: dummyRequest,
    headers: {
      authorization: "authorization-text",
    },
  };
  const onSubmit = (data: FormData) => {
    const receivers = JSON.parse(data.receivers);
    const hasEmptyOrNull = receivers.some((row: any) =>
      Object.values(row).some((value) => value === null || value === "")
    );
    if (hasEmptyOrNull) {
      notification.error({
        message: "Thi·∫øu d·ªØ li·ªáu",
        description:
          "Vui l√≤ng ki·ªÉm tra l·∫°i danh s√°ch ng∆∞·ªùi nh·∫≠n, kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      });
      return;
    }
    const sendData: IEmailData = {
      name: data.name,
      email: data.email,
      title: data.title,
      content: data.content,
      receivers: data.receivers,
      attachment: data.attachment,
    };
    console.log(sendData);
    mutate(sendData, {
      onSuccess: () => {
        notification.success({
          message: "G·ª≠i email th√†nh c√¥ng",
          description: "B·∫°n ƒë√£ g·ª≠i email th√†nh c√¥ng",
        });
      },
      onError: () => {
        notification.error({
          message: "G·ª≠i email th·∫•t b·∫°i",
          description: "Vui l√≤ng th·ª≠ l·∫°i sau",
        });
      },
    });
  };
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div className="p-6 bg-gray-50 min-h-screen">
        {/* Ti√™u ƒë·ªÅ */}
        <h1 className="text-3xl font-bold text-gray-900">
          H·ªá th·ªëng g·ª≠i Email t·ª± ƒë·ªông
        </h1>
        <p className="text-gray-500 mt-1">
          T·∫°o v√† g·ª≠i email h√†ng lo·∫°t m·ªôt c√°ch d·ªÖ d√†ng
        </p>

        {/* Tabs */}
        <div className="flex space-x-4 mt-6">
          <button className="px-4 py-2 bg-white border rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-100 flex items-center">
            üìß So·∫°n Email
          </button>
          <button className="px-4 py-2 bg-white border rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-100 flex items-center">
            ‚úàÔ∏è G·ª≠i Email
          </button>
        </div>

        {/* Grid main content */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
          {/* Th√¥ng tin ng∆∞·ªùi g·ª≠i */}
          <div className="col-span-2 bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              Th√¥ng tin ng∆∞·ªùi g·ª≠i
            </h2>
            <p className="text-sm text-gray-500 mb-4">
              C·∫•u h√¨nh th√¥ng tin email g·ª≠i ƒëi
            </p>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                T√™n ng∆∞·ªùi g·ª≠i
              </label>
              <input
                {...register("name")}
                type="text"
                placeholder="Nh·∫≠p t√™n ng∆∞·ªùi g·ª≠i"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Email ng∆∞·ªùi g·ª≠i
              </label>
              <input
                {...register("email")}
                type="email"
                placeholder="your-email@example.com"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          {/* Th·ªëng k√™ */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              Th·ªëng k√™
            </h2>
            <p className="text-sm text-gray-500 mb-4">
              T·ªïng quan v·ªÅ chi·∫øn d·ªãch email
            </p>

            <div className="flex space-x-4">
              <div className="bg-blue-100 text-blue-700 text-center p-4 rounded-md w-1/2">
                <div className="text-2xl font-bold">0</div>
                <div className="text-sm">T·ªïng ng∆∞·ªùi nh·∫≠n</div>
              </div>
              <div className="bg-green-100 text-green-700 text-center p-4 rounded-md w-1/2">
                <div className="text-2xl font-bold">0</div>
                <div className="text-sm">ƒê√£ g·ª≠i th√†nh c√¥ng</div>
              </div>
            </div>
          </div>
        </div>

        {/* N·ªôi dung email */}
        <div className="mt-6 bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">
            N·ªôi dung Email
          </h2>
          <p className="text-sm text-gray-500 mb-4">
            So·∫°n n·ªôi dung email v·ªõi tr√¨nh so·∫°n th·∫£o rich text
          </p>

          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700">
              Ti√™u ƒë·ªÅ email
            </label>
            <input
              {...register("title")}
              type="text"
              placeholder="Nh·∫≠p ti√™u ƒë·ªÅ email"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
            />
            {errors.title && (
              <p className="text-red-500 text-sm mt-1">
                {errors.title.message}
              </p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              N·ªôi dung email
            </label>
            <Editor control={control} name="content" />
          </div>
          {/* Upload file */}
          <div className="mt-6 bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              üìé T·ªáp ƒë√≠nh k√®m
            </h2>
            <p className="text-sm text-gray-500 mb-4">
              ƒê√≠nh k√®m t·ªáp tin v√†o email (t√πy ch·ªçn)
            </p>

            <div className="mb-4">
              {/* <input
                type="file"
                multiple
                {...register("attachment")}
                className="mt-1 block w-full text-sm text-gray-500
                file:mr-4 file:py-2 file:px-4
                file:rounded-md file:border-0
                file:text-sm file:font-semibold
                file:bg-blue-50 file:text-blue-700
                hover:file:bg-blue-100"
              /> */}
              <Controller
                name="attachment"
                control={control}
                render={({ field }) => (
                  <Upload
                    {...props}
                    onChange={(info) => {
                      field.onChange(info.fileList); // c·∫≠p nh·∫≠t v√†o RHF
                      if (info.file.status === "done") {
                        message.success(`${info.file.name} uploaded`);
                      } else if (info.file.status === "error") {
                        message.error(`${info.file.name} failed`);
                      }
                    }}
                    fileList={field.value || []}
                  >
                    <Button>Click to Upload</Button>
                  </Upload>
                )}
              />
            </div>
          </div>
          {/* Data */}
          <div className="mt-6 bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              üë§Danh s√°ch ng∆∞·ªùi nh·∫≠n
            </h2>
            <DataTable control={control} name="receivers" />
          </div>
        </div>
      </div>
    </form>
  );
};

export default EmailSender;
